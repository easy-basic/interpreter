!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=12)}([function(t,n,e){"use strict";n.token_types=Object.freeze({Whitespace:0,Comment:1,EOL:2,Keyword:3,DeciamlNum:4,OcatalNum:5,HexaNum:6,Operator:7,UniaryOperator:14,String:8,Identifier:9,Unknown:10,EOF:11,LineNumber:12,EOS:13,Array:15,Function:16}),n.keywords=["END","FOR","NEXT","DATA","INPUT","DIM","READ","LET","GOTO","RUN","IF","RESTORE","GOSUB","RETURN","STOP","PRINT","?","CLEAR","LIST","NEW","ON","WAIT","DEF","POKE","CONT","OUT","LPRINT","LLIST","WIDTH","ELSE","TRON","TROFF","SWAP","ERASE","EDIT","ERROR","RESUME","DELETE","AUTO","RENUM","DEFSTR","DEFINT","DEFSNG","DEFDBL","LINE","WHILE","WEND","CALL","WRITE","OPTION","RANDOMIZE","OPEN","CLOSE","LOAD","MERGE","SAVE","COLOR","CLS","MOTOR","BSAVE","BLOAD","SOUND","BEEP","PSET","PRESET","SCREEN","KEY","LOCATE","TO","THEN","TAB(","STEP","USR","FN","SPC(","NOT","ERL","ERR","STRING$","USING","INSTR","VARPTR","CSRLIN","POINT","OFF","INKEY$","CVI","CVS","CVD","MKI$","MKS$","MKD$","EXTERR","FILES","FIELD","SYSTEM","NAME","LSET","RSET","KILL","PUT","GET","RESET","COMMON","CHAIN","DATE$","TIME$","PAINT","COM","CIRCLE","DRAW","PLAY","TIMER","ERDEV","IOCTL","CHDIR","MKDIR","RMDIR","SHELL","ENVIRON","VIEW","WINDOW","PMAP","PALETTE","LCOPY","CALLS","PCOPY","LOCK","UNLOCK","LEFT$","RIGHT$","MID$","SGN","INT","ABS","SQR","RND","SIN","LOG","EXP","COS","TAN","ATN","FRE","INP","POS","LEN","STR$","VAL","ASC","CHR$","PEEK","SPACE$","OCT$","HEX$","LPOS","CINT","CSNG","CDBL","FIX","PEN","STICK","STRIG","EOF","LOC","LOF","NOISE","AS","SHARED","ACCESS","RANDOM","OUTPUT","APPEND","BASE","SEG","ALL","REM","'"],n.binary_operators={"^":12,"*":11,"/":11,"\\":10,MOD:9,"+":8,"-":8,">":7,"<":7,">=":7,"<=":7,"=>":7,"=<":7,"<>":7,"><":7,"==":7,AND:5,OR:4,XOR:3,EQV:2,IMP:1},n.unary_operators=["-","+","NOT"]},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=e(0);var u=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"parse",value:function(t,n){return this.scanner=t,this._parseUntil(n)}},{key:"_parseUntil",value:function(t){for(var n=[];;){if(this.scanner.peekState(),this.token=this.scanner.scan(),this.scanner.seekState(),!this.token.text||this.token.text==t||this.token.type==i.token_types.EOL||":"==this.token.text){this.token=this.scanner.scan();break}if(n.length>0&&","!=this.token.text)throw"Unexpected token "+this.token.text;","==this.token.text&&(this.token=this.scanner.scan());var e=this._binaryParser();n.push(e)}return 1==n.length?n[0]:n}},{key:"_readToken",value:function(){if(this.token=this.scanner.scan(),this.token.type==i.token_types.DeciamlNum){var t=this.token.text.replace(/(!|%|#|)$/,"")||0;return Object.assign(this.token,{value:parseFloat(t)})}if(this.token.type==i.token_types.OcatalNum){t=this.token.text.replace(/^&o?/i,"")||"0";return Object.assign(this.token,{value:this._convertFromBaseToBase(t,8,10)})}if(this.token.type==i.token_types.HexaNum){t=this.token.text.replace(/^&h/i,"")||"0";return Object.assign(this.token,{value:this._convertFromBaseToBase(t,16,10)})}if(this.token.type==i.token_types.String)return Object.assign(this.token,{value:this.token.text.substr(1).slice(0,-1)});if("["==this.token.text)return{object:this._parseUntil("]"),is_array:!0};if(this._isUniaryOp(this.token.text))return{type:i.token_types.UniaryOperator,operator:this.token.text,argument:this._readToken(),prefix:!0};if("("==this.token.text)return this._parseUntil(")");if(this.token.type==i.token_types.Identifier){this.scanner.peekState();var n=this.token;if(this.token=this.scanner.scan(),"["==this.token.text)return{type:i.token_types.Array,object:n,property:this._parseUntil("]")};if("("==this.token.text)return{type:i.token_types.Function,object:n,property:this._parseUntil(")")};this.scanner.seekState(),this.token=this.scanner.token}return this.token}},{key:"_binaryPrecedence",value:function(t){return i.binary_operators[t]||0}},{key:"_readBinaryToken",value:function(){return this.scanner.peekState(),this.token=this.scanner.scan(),this.token.type==i.token_types.Operator?Object.assign(this.token,{prec:this._binaryPrecedence(this.token.text)}):(this.scanner.seekState(),!1)}},{key:"_isUniaryOp",value:function(t){return["+","-","NOT"].indexOf(t)>-1}},{key:"_binaryParser",value:function(){var t=this._readToken(),n=this._readBinaryToken();if(!n)return t;var e=this._readToken();if(!e)throw"Expected expression after "+n+", "+this.scanner.index;for(var r=[t,n,e];(n=this._readBinaryToken())&&0!=n.prec;){for(;r.length>2&&n.prec<=r[r.length-2].prec;){e=r.pop(),n=r.pop(),t=r.pop();var i=this._createBinaryExpression(n,t,e);r.push(i)}if(!(i=this._readToken()))throw"Expected expression after "+n+", "+this.scanner.index;r.push(n,i)}var u=r.length-1;for(i=r[u];u>1;)i=this._createBinaryExpression(r[u-1],r[u-2],i),u-=2;return i}},{key:"_createBinaryExpression",value:function(t,n,e){return{operator:t.text,left:n,right:e,is_binary:!0}}},{key:"_convertFromBaseToBase",value:function(t,n,e){var r=parseInt(t,n);return parseInt(r.toString(e))}}]),t}();n.default=u},function(t,n,e){var r,i=e(8),u=function(t,n,e,r){return{key:t,value:n,next:e,prev:r}};r=function(){var t=this;t._dict={},t._first=null,t._last=null,t._size=0;var n=i.toArray(arguments);t._stringify=function(t){return t},"function"==typeof n[0]&&(t._stringify=n.shift()),i.each(n,function(n){t.putBefore(n[0],n[1],null)})},i.extend(r.prototype,{_k:function(t){return" "+this._stringify(t)},empty:function(){return!this._first},size:function(){return this._size},_linkEltIn:function(t){t.next?(t.prev=t.next.prev,t.next.prev=t,t.prev&&(t.prev.next=t)):(t.prev=this._last,this._last&&(this._last.next=t),this._last=t),null!==this._first&&this._first!==t.next||(this._first=t)},_linkEltOut:function(t){t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next)},putBefore:function(t,n,e){if(this._dict[this._k(t)])throw new Error("Item "+t+" already present in OrderedDict");var r=u(t,n,e?this._dict[this._k(e)]:null);if(void 0===r.next)throw new Error("could not find item to put this one before");this._linkEltIn(r),this._dict[this._k(t)]=r,this._size++},append:function(t,n){this.putBefore(t,n,null)},remove:function(t){var n=this._dict[this._k(t)];if(void 0===n)throw new Error("Item "+t+" not present in OrderedDict");return this._linkEltOut(n),this._size--,delete this._dict[this._k(t)],n.value},get:function(t){if(this.has(t))return this._dict[this._k(t)].value},has:function(t){return i.has(this._dict,this._k(t))},forEach:function(t){for(var n=0,e=this._first;null!==e;){if(t(e.value,e.key,n)===r.BREAK)return;e=e.next,n++}},first:function(){if(!this.empty())return this._first.key},firstValue:function(){if(!this.empty())return this._first.value},last:function(){if(!this.empty())return this._last.key},lastValue:function(){if(!this.empty())return this._last.value},prev:function(t){if(this.has(t)){var n=this._dict[this._k(t)];if(n.prev)return n.prev.key}return null},next:function(t){if(this.has(t)){var n=this._dict[this._k(t)];if(n.next)return n.next.key}return null},moveBefore:function(t,n){var e=this._dict[this._k(t)],r=n?this._dict[this._k(n)]:null;if(void 0===e)throw new Error("Item to move is not present");if(void 0===r)throw new Error("Could not find element to move this one before");r!==e.next&&(this._linkEltOut(e),e.next=r,this._linkEltIn(e))},indexOf:function(t){var n=this,e=null;return n.forEach(function(i,u,a){if(n._k(u)===n._k(t))return e=a,r.BREAK}),e},_checkRep:function(){i.each(this._dict,function(t,n){if(n.next===n)throw new Error("Next is a loop");if(n.prev===n)throw new Error("Prev is a loop")})}}),r.BREAK={break:!0},t.exports=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(e(13));var u=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin_statements={PRINT:new i.default},this.statement_dict=this.builtin_statements}return r(t,[{key:"clear",value:function(){this.statement_dict=this.builtin_statements}},{key:"get",value:function(t){return this.statement_dict[t]}},{key:"remove",value:function(t){delete this.statement_dict[t]}},{key:"register",value:function(t,n){this.statement_dict[t]=n}}]),t}();n.default=u},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.var_dict={}}return r(t,[{key:"clear",value:function(){this.var_dict={}}},{key:"get",value:function(t){return this.var_dict[t]}},{key:"register",value:function(t,n){this.var_dict[t]=n}}]),t}();n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.fn_dict={}}return r(t,[{key:"clear",value:function(){this.fn_dict={}}},{key:"get",value:function(t){return this.fn_dict[t]}},{key:"register",value:function(t,n){this.fn_dict[t]=n}}]),t}();n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=c(e(5)),u=c(e(4)),a=c(e(3)),o=c(e(14)),s=c(e(15));function c(t){return t&&t.__esModule?t:{default:t}}var l=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.statement_manager=new a.default,this.fn_manager=new i.default,this.var_manager=new u.default,this.op_manager=new s.default,this.expr_evaluator=new o.default}return r(t,[{key:"execute",value:function(t){var n=!0,e=!1,r=void 0;try{for(var i,u=t[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var a=i.value;this._executeLine(a)}}catch(t){e=!0,r=t}finally{try{!n&&u.return&&u.return()}finally{if(e)throw r}}}},{key:"_executeLine",value:function(t){var n=!0,e=!1,r=void 0;try{for(var i,u=t.statements[Symbol.iterator]();!(n=(i=u.next()).done);n=!0){var a=i.value,o=this.statement_manager.get(a.statement);if(!o)throw"Statement "+a.statement+" not registered";o.execute(a,this)}}catch(t){e=!0,r=t}finally{try{!n&&u.return&&u.return()}finally{if(e)throw r}}}}]),t}();n.default=l},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.build_satements=function(){var t=new r.default;return t.ARC=a,t.ELLIPSE=a,t.LINE=a,t.POINT=a,t.QUAD=a,t.RECT=a,t.TRIANGLE=a,t.CIRCLE=a,t.COLOR=a,t.DRAW=a,t.PAINT=a,t.PALETTE=a,t.POINT=a,t.GET=a,t.PUT=a,t.CLS=a,t.LOCATE=a,t.PRINT=l,t["?"]=l,t.BEEP=a,t.NOISE=a,t.PLAY=a,t.INPUT=a,t.LET=o,t.DATA=a,t.READ=a,t.ERASE=u,t.SWAP=u,t.END=u,t.WEND=u,t.NEW=u,t.ELSE=u,t.ENDIF=u,t.REM=u,t["'"]=u,t.FOR=s,t.NEXT=a,t.WHILE=a,t.IF=c,t.ELIF=c,t};var r=i(e(2));i(e(1));function i(t){return t&&t.__esModule?t:{default:t}}function u(t,n){n.parse(t)}function a(t,n){return n.parse(t)}function o(t,n,e){if(!e){e=t.scan().text;var r=t.scan();if("="!=r.text)throw"Invalid token "+r.text}return{ident:e,val:n.parse(t)}}function s(t,n){var e=t.scan().text;if("="!=(u=t.scan()).text)throw"Invalid token "+u.text;var r=n.parse(t,"TO");if("TO"!=(u=t.scan()).text)throw"Invalid token "+u.text;var i,u,a=n.parse(t,"STEP");return"STEP"==(u=t.scan()).text&&(i=n.parse(t)),{ident:e,start:r,end:a,step:i}}function c(t,n){return{cond:n.parse(t)}}function l(t,n){return{exprs:n.parse(t,"USING"),format:n.parse(t)}}},function(t,n,e){var r;(function(){var e=this,i=e._,u={},a=Array.prototype,o=Object.prototype,s=Function.prototype,c=a.push,l=a.slice,f=a.concat,h=o.toString,p=o.hasOwnProperty,v=a.forEach,y=a.map,d=a.reduce,_=a.reduceRight,k=a.filter,m=a.every,E=a.some,g=a.indexOf,b=a.lastIndexOf,O=Array.isArray,x=Object.keys,T=s.bind,w=function(t){return t instanceof w?t:this instanceof w?void(this._wrapped=t):new w(t)};void 0!==t&&t.exports&&(n=t.exports=w),n._=w,w.VERSION="1.6.0";var S=w.each=w.forEach=function(t,n,e){if(null==t)return t;if(v&&t.forEach===v)t.forEach(n,e);else if(t.length===+t.length){for(var r=0,i=t.length;r<i;r++)if(n.call(e,t[r],r,t)===u)return}else{var a=w.keys(t);for(r=0,i=a.length;r<i;r++)if(n.call(e,t[a[r]],a[r],t)===u)return}return t};w.map=w.collect=function(t,n,e){var r=[];return null==t?r:y&&t.map===y?t.map(n,e):(S(t,function(t,i,u){r.push(n.call(e,t,i,u))}),r)};var N="Reduce of empty array with no initial value";w.reduce=w.foldl=w.inject=function(t,n,e,r){var i=arguments.length>2;if(null==t&&(t=[]),d&&t.reduce===d)return r&&(n=w.bind(n,r)),i?t.reduce(n,e):t.reduce(n);if(S(t,function(t,u,a){i?e=n.call(r,e,t,u,a):(e=t,i=!0)}),!i)throw new TypeError(N);return e},w.reduceRight=w.foldr=function(t,n,e,r){var i=arguments.length>2;if(null==t&&(t=[]),_&&t.reduceRight===_)return r&&(n=w.bind(n,r)),i?t.reduceRight(n,e):t.reduceRight(n);var u=t.length;if(u!==+u){var a=w.keys(t);u=a.length}if(S(t,function(o,s,c){s=a?a[--u]:--u,i?e=n.call(r,e,t[s],s,c):(e=t[s],i=!0)}),!i)throw new TypeError(N);return e},w.find=w.detect=function(t,n,e){var r;return I(t,function(t,i,u){if(n.call(e,t,i,u))return r=t,!0}),r},w.filter=w.select=function(t,n,e){var r=[];return null==t?r:k&&t.filter===k?t.filter(n,e):(S(t,function(t,i,u){n.call(e,t,i,u)&&r.push(t)}),r)},w.reject=function(t,n,e){return w.filter(t,function(t,r,i){return!n.call(e,t,r,i)},e)},w.every=w.all=function(t,n,e){n||(n=w.identity);var r=!0;return null==t?r:m&&t.every===m?t.every(n,e):(S(t,function(t,i,a){if(!(r=r&&n.call(e,t,i,a)))return u}),!!r)};var I=w.some=w.any=function(t,n,e){n||(n=w.identity);var r=!1;return null==t?r:E&&t.some===E?t.some(n,e):(S(t,function(t,i,a){if(r||(r=n.call(e,t,i,a)))return u}),!!r)};w.contains=w.include=function(t,n){return null!=t&&(g&&t.indexOf===g?-1!=t.indexOf(n):I(t,function(t){return t===n}))},w.invoke=function(t,n){var e=l.call(arguments,2),r=w.isFunction(n);return w.map(t,function(t){return(r?n:t[n]).apply(t,e)})},w.pluck=function(t,n){return w.map(t,w.property(n))},w.where=function(t,n){return w.filter(t,w.matches(n))},w.findWhere=function(t,n){return w.find(t,w.matches(n))},w.max=function(t,n,e){if(!n&&w.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.max.apply(Math,t);var r=-1/0,i=-1/0;return S(t,function(t,u,a){var o=n?n.call(e,t,u,a):t;o>i&&(r=t,i=o)}),r},w.min=function(t,n,e){if(!n&&w.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.min.apply(Math,t);var r=1/0,i=1/0;return S(t,function(t,u,a){var o=n?n.call(e,t,u,a):t;o<i&&(r=t,i=o)}),r},w.shuffle=function(t){var n,e=0,r=[];return S(t,function(t){n=w.random(e++),r[e-1]=r[n],r[n]=t}),r},w.sample=function(t,n,e){return null==n||e?(t.length!==+t.length&&(t=w.values(t)),t[w.random(t.length-1)]):w.shuffle(t).slice(0,Math.max(0,n))};var R=function(t){return null==t?w.identity:w.isFunction(t)?t:w.property(t)};w.sortBy=function(t,n,e){return n=R(n),w.pluck(w.map(t,function(t,r,i){return{value:t,index:r,criteria:n.call(e,t,r,i)}}).sort(function(t,n){var e=t.criteria,r=n.criteria;if(e!==r){if(e>r||void 0===e)return 1;if(e<r||void 0===r)return-1}return t.index-n.index}),"value")};var A=function(t){return function(n,e,r){var i={};return e=R(e),S(n,function(u,a){var o=e.call(r,u,a,n);t(i,o,u)}),i}};w.groupBy=A(function(t,n,e){w.has(t,n)?t[n].push(e):t[n]=[e]}),w.indexBy=A(function(t,n,e){t[n]=e}),w.countBy=A(function(t,n){w.has(t,n)?t[n]++:t[n]=1}),w.sortedIndex=function(t,n,e,r){for(var i=(e=R(e)).call(r,n),u=0,a=t.length;u<a;){var o=u+a>>>1;e.call(r,t[o])<i?u=o+1:a=o}return u},w.toArray=function(t){return t?w.isArray(t)?l.call(t):t.length===+t.length?w.map(t,w.identity):w.values(t):[]},w.size=function(t){return null==t?0:t.length===+t.length?t.length:w.keys(t).length},w.first=w.head=w.take=function(t,n,e){if(null!=t)return null==n||e?t[0]:n<0?[]:l.call(t,0,n)},w.initial=function(t,n,e){return l.call(t,0,t.length-(null==n||e?1:n))},w.last=function(t,n,e){if(null!=t)return null==n||e?t[t.length-1]:l.call(t,Math.max(t.length-n,0))},w.rest=w.tail=w.drop=function(t,n,e){return l.call(t,null==n||e?1:n)},w.compact=function(t){return w.filter(t,w.identity)};var P=function(t,n,e){return n&&w.every(t,w.isArray)?f.apply(e,t):(S(t,function(t){w.isArray(t)||w.isArguments(t)?n?c.apply(e,t):P(t,n,e):e.push(t)}),e)};w.flatten=function(t,n){return P(t,n,[])},w.without=function(t){return w.difference(t,l.call(arguments,1))},w.partition=function(t,n){var e=[],r=[];return S(t,function(t){(n(t)?e:r).push(t)}),[e,r]},w.uniq=w.unique=function(t,n,e,r){w.isFunction(n)&&(r=e,e=n,n=!1);var i=e?w.map(t,e,r):t,u=[],a=[];return S(i,function(e,r){(n?r&&a[a.length-1]===e:w.contains(a,e))||(a.push(e),u.push(t[r]))}),u},w.union=function(){return w.uniq(w.flatten(arguments,!0))},w.intersection=function(t){var n=l.call(arguments,1);return w.filter(w.uniq(t),function(t){return w.every(n,function(n){return w.contains(n,t)})})},w.difference=function(t){var n=f.apply(a,l.call(arguments,1));return w.filter(t,function(t){return!w.contains(n,t)})},w.zip=function(){for(var t=w.max(w.pluck(arguments,"length").concat(0)),n=new Array(t),e=0;e<t;e++)n[e]=w.pluck(arguments,""+e);return n},w.object=function(t,n){if(null==t)return{};for(var e={},r=0,i=t.length;r<i;r++)n?e[t[r]]=n[r]:e[t[r][0]]=t[r][1];return e},w.indexOf=function(t,n,e){if(null==t)return-1;var r=0,i=t.length;if(e){if("number"!=typeof e)return t[r=w.sortedIndex(t,n)]===n?r:-1;r=e<0?Math.max(0,i+e):e}if(g&&t.indexOf===g)return t.indexOf(n,e);for(;r<i;r++)if(t[r]===n)return r;return-1},w.lastIndexOf=function(t,n,e){if(null==t)return-1;var r=null!=e;if(b&&t.lastIndexOf===b)return r?t.lastIndexOf(n,e):t.lastIndexOf(n);for(var i=r?e:t.length;i--;)if(t[i]===n)return i;return-1},w.range=function(t,n,e){arguments.length<=1&&(n=t||0,t=0),e=arguments[2]||1;for(var r=Math.max(Math.ceil((n-t)/e),0),i=0,u=new Array(r);i<r;)u[i++]=t,t+=e;return u};var L=function(){};w.bind=function(t,n){var e,r;if(T&&t.bind===T)return T.apply(t,l.call(arguments,1));if(!w.isFunction(t))throw new TypeError;return e=l.call(arguments,2),r=function(){if(!(this instanceof r))return t.apply(n,e.concat(l.call(arguments)));L.prototype=t.prototype;var i=new L;L.prototype=null;var u=t.apply(i,e.concat(l.call(arguments)));return Object(u)===u?u:i}},w.partial=function(t){var n=l.call(arguments,1);return function(){for(var e=0,r=n.slice(),i=0,u=r.length;i<u;i++)r[i]===w&&(r[i]=arguments[e++]);for(;e<arguments.length;)r.push(arguments[e++]);return t.apply(this,r)}},w.bindAll=function(t){var n=l.call(arguments,1);if(0===n.length)throw new Error("bindAll must be passed function names");return S(n,function(n){t[n]=w.bind(t[n],t)}),t},w.memoize=function(t,n){var e={};return n||(n=w.identity),function(){var r=n.apply(this,arguments);return w.has(e,r)?e[r]:e[r]=t.apply(this,arguments)}},w.delay=function(t,n){var e=l.call(arguments,2);return setTimeout(function(){return t.apply(null,e)},n)},w.defer=function(t){return w.delay.apply(w,[t,1].concat(l.call(arguments,1)))},w.throttle=function(t,n,e){var r,i,u,a=null,o=0;e||(e={});var s=function(){o=!1===e.leading?0:w.now(),a=null,u=t.apply(r,i),r=i=null};return function(){var c=w.now();o||!1!==e.leading||(o=c);var l=n-(c-o);return r=this,i=arguments,l<=0?(clearTimeout(a),a=null,o=c,u=t.apply(r,i),r=i=null):a||!1===e.trailing||(a=setTimeout(s,l)),u}},w.debounce=function(t,n,e){var r,i,u,a,o,s=function(){var c=w.now()-a;c<n?r=setTimeout(s,n-c):(r=null,e||(o=t.apply(u,i),u=i=null))};return function(){u=this,i=arguments,a=w.now();var c=e&&!r;return r||(r=setTimeout(s,n)),c&&(o=t.apply(u,i),u=i=null),o}},w.once=function(t){var n,e=!1;return function(){return e?n:(e=!0,n=t.apply(this,arguments),t=null,n)}},w.wrap=function(t,n){return w.partial(n,t)},w.compose=function(){var t=arguments;return function(){for(var n=arguments,e=t.length-1;e>=0;e--)n=[t[e].apply(this,n)];return n[0]}},w.after=function(t,n){return function(){if(--t<1)return n.apply(this,arguments)}},w.keys=function(t){if(!w.isObject(t))return[];if(x)return x(t);var n=[];for(var e in t)w.has(t,e)&&n.push(e);return n},w.values=function(t){for(var n=w.keys(t),e=n.length,r=new Array(e),i=0;i<e;i++)r[i]=t[n[i]];return r},w.pairs=function(t){for(var n=w.keys(t),e=n.length,r=new Array(e),i=0;i<e;i++)r[i]=[n[i],t[n[i]]];return r},w.invert=function(t){for(var n={},e=w.keys(t),r=0,i=e.length;r<i;r++)n[t[e[r]]]=e[r];return n},w.functions=w.methods=function(t){var n=[];for(var e in t)w.isFunction(t[e])&&n.push(e);return n.sort()},w.extend=function(t){return S(l.call(arguments,1),function(n){if(n)for(var e in n)t[e]=n[e]}),t},w.pick=function(t){var n={},e=f.apply(a,l.call(arguments,1));return S(e,function(e){e in t&&(n[e]=t[e])}),n},w.omit=function(t){var n={},e=f.apply(a,l.call(arguments,1));for(var r in t)w.contains(e,r)||(n[r]=t[r]);return n},w.defaults=function(t){return S(l.call(arguments,1),function(n){if(n)for(var e in n)void 0===t[e]&&(t[e]=n[e])}),t},w.clone=function(t){return w.isObject(t)?w.isArray(t)?t.slice():w.extend({},t):t},w.tap=function(t,n){return n(t),t};var j=function(t,n,e,r){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return t===n;t instanceof w&&(t=t._wrapped),n instanceof w&&(n=n._wrapped);var i=h.call(t);if(i!=h.call(n))return!1;switch(i){case"[object String]":return t==String(n);case"[object Number]":return t!=+t?n!=+n:0==t?1/t==1/n:t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object RegExp]":return t.source==n.source&&t.global==n.global&&t.multiline==n.multiline&&t.ignoreCase==n.ignoreCase}if("object"!=typeof t||"object"!=typeof n)return!1;for(var u=e.length;u--;)if(e[u]==t)return r[u]==n;var a=t.constructor,o=n.constructor;if(a!==o&&!(w.isFunction(a)&&a instanceof a&&w.isFunction(o)&&o instanceof o)&&"constructor"in t&&"constructor"in n)return!1;e.push(t),r.push(n);var s=0,c=!0;if("[object Array]"==i){if(c=(s=t.length)==n.length)for(;s--&&(c=j(t[s],n[s],e,r)););}else{for(var l in t)if(w.has(t,l)&&(s++,!(c=w.has(n,l)&&j(t[l],n[l],e,r))))break;if(c){for(l in n)if(w.has(n,l)&&!s--)break;c=!s}}return e.pop(),r.pop(),c};w.isEqual=function(t,n){return j(t,n,[],[])},w.isEmpty=function(t){if(null==t)return!0;if(w.isArray(t)||w.isString(t))return 0===t.length;for(var n in t)if(w.has(t,n))return!1;return!0},w.isElement=function(t){return!(!t||1!==t.nodeType)},w.isArray=O||function(t){return"[object Array]"==h.call(t)},w.isObject=function(t){return t===Object(t)},S(["Arguments","Function","String","Number","Date","RegExp"],function(t){w["is"+t]=function(n){return h.call(n)=="[object "+t+"]"}}),w.isArguments(arguments)||(w.isArguments=function(t){return!(!t||!w.has(t,"callee"))}),w.isFunction=function(t){return"function"==typeof t},w.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},w.isNaN=function(t){return w.isNumber(t)&&t!=+t},w.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"==h.call(t)},w.isNull=function(t){return null===t},w.isUndefined=function(t){return void 0===t},w.has=function(t,n){return p.call(t,n)},w.noConflict=function(){return e._=i,this},w.identity=function(t){return t},w.constant=function(t){return function(){return t}},w.property=function(t){return function(n){return n[t]}},w.matches=function(t){return function(n){if(n===t)return!0;for(var e in t)if(t[e]!==n[e])return!1;return!0}},w.times=function(t,n,e){for(var r=Array(Math.max(0,t)),i=0;i<t;i++)r[i]=n.call(e,i);return r},w.random=function(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))},w.now=Date.now||function(){return(new Date).getTime()};var M={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};M.unescape=w.invert(M.escape);var C={escape:new RegExp("["+w.keys(M.escape).join("")+"]","g"),unescape:new RegExp("("+w.keys(M.unescape).join("|")+")","g")};w.each(["escape","unescape"],function(t){w[t]=function(n){return null==n?"":(""+n).replace(C[t],function(n){return M[t][n]})}}),w.result=function(t,n){if(null!=t){var e=t[n];return w.isFunction(e)?e.call(t):e}},w.mixin=function(t){S(w.functions(t),function(n){var e=w[n]=t[n];w.prototype[n]=function(){var t=[this._wrapped];return c.apply(t,arguments),$.call(this,e.apply(w,t))}})};var D=0;w.uniqueId=function(t){var n=++D+"";return t?t+n:n},w.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var F=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","\t":"t","\u2028":"u2028","\u2029":"u2029"},U=/\\|'|\r|\n|\t|\u2028|\u2029/g;w.template=function(t,n,e){var r;e=w.defaults({},e,w.templateSettings);var i=new RegExp([(e.escape||F).source,(e.interpolate||F).source,(e.evaluate||F).source].join("|")+"|$","g"),u=0,a="__p+='";t.replace(i,function(n,e,r,i,o){return a+=t.slice(u,o).replace(U,function(t){return"\\"+B[t]}),e&&(a+="'+\n((__t=("+e+"))==null?'':_.escape(__t))+\n'"),r&&(a+="'+\n((__t=("+r+"))==null?'':__t)+\n'"),i&&(a+="';\n"+i+"\n__p+='"),u=o+n.length,n}),a+="';\n",e.variable||(a="with(obj||{}){\n"+a+"}\n"),a="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+a+"return __p;\n";try{r=new Function(e.variable||"obj","_",a)}catch(t){throw t.source=a,t}if(n)return r(n,w);var o=function(t){return r.call(this,t,w)};return o.source="function("+(e.variable||"obj")+"){\n"+a+"}",o},w.chain=function(t){return w(t).chain()};var $=function(t){return this._chain?w(t).chain():t};w.mixin(w),S(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var n=a[t];w.prototype[t]=function(){var e=this._wrapped;return n.apply(e,arguments),"shift"!=t&&"splice"!=t||0!==e.length||delete e[0],$.call(this,e)}}),S(["concat","join","slice"],function(t){var n=a[t];w.prototype[t]=function(){return $.call(this,n.apply(this._wrapped,arguments))}}),w.extend(w.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),void 0===(r=function(){return w}.apply(n,[]))||(t.exports=r)}).call(this)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.build_scanners=function(){var t=new r.default;return t.append("eof_scanner",u),t.append("eol_scanner",a),t.append("eos_scanner",o),t.append("comment_scanner",c),t.append("keyword_scanner",s),t.append("operator_scanner",p),t.append("string_scanner",v),t.append("hexa_scanner",h),t.append("octal_scanner",f),t.append("decimal_scanner",l),t.append("identifier_scanner",y),t.append("unkown_scanner",d),t};var r=function(t){return t&&t.__esModule?t:{default:t}}(e(2)),i=e(0);function u(t,n){if(!t[0])return{length:0,type:i.token_types.EOF,text:t[0]}}function a(t,n){if(t.match(/^(\r\n|\r|\n)/))return{length:1,type:i.token_types.EOL,text:t.slice(0,1)}}function o(t,n){if(":"==t[0])return{length:1,type:i.token_types.EOS,text:":"}}function s(t,n){var e=t.match(/^[a-z$('?]+/i);if(e&&i.keywords.indexOf(e[0].toUpperCase())>-1)return{length:e[0].length,type:i.token_types.Keyword,text:e[0].toUpperCase()}}function c(t,n){var e=0;if(n&&("REM"==n.text||"'"==n.text)){for(;t[e]&&!t[e].match(/^(\r\n|\r|\n)/);)e++;return{length:e,type:i.token_types.Comment,text:t.slice(0,e)}}}function l(t,n){var e=t.match(/^((\+|-)?[\d.]+((e|d)(\+|-)?(\d))?(#|!|%)?)/i);if(e)return{length:e[0].length,type:i.token_types.DeciamlNum,text:e[0]}}function f(t,n){var e=t.match(/^&o?[0-7]*/i);if(e)return{length:e[0].length,type:i.token_types.OcatalNum,text:e[0]}}function h(t,n){var e=t.match(/^&h[0-9a-f]*/i);if(e)return{length:e[0].length,type:i.token_types.HexaNum,text:e[0]}}function p(t,n){var e=t.slice(0,3).match(/(MOD|AND|OR|XOR|EQV|IMP)/i)||t.slice(0,2).match(/(>=|<=|=>|=<|<>|==)/i)||t.match(/^(\^|\*|\/|\\|\+|-|>|<)/i);if(e)return{length:e[0].length,type:i.token_types.Operator,text:e[0]}}function v(t,n){var e=t.match(/^"([^"\r\n]*)"?/);if(e)return{length:e[0].length,type:i.token_types.String,text:e[0]}}function y(t,n){var e=t.match(/^([a-z]([a-z0-9.]+)?)(!|#|\$)?/i);if(e)return{length:e[0].length,type:i.token_types.Identifier,text:e[0]}}function d(t,n){return{length:1,type:i.token_types.Unknown,text:t[0]}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=e(9);var u=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.source="",this.pos=0,this.last_token=null,this.token=null,this.scanners=(0,i.build_scanners)(),this.states=[]}return r(t,[{key:"setSource",value:function(t){this.source=t,this.pos=0,this.last_token=null,this.token=null}},{key:"skipBlank",value:function(){var t=this.source.slice(this.pos).match(/^[ \t\f]+/);t&&(this.pos+=t.length)}},{key:"peekState",value:function(){this.states.push({last_token:this.last_token,pos:this.pos,token:this.token})}},{key:"seekState",value:function(){var t=this.states.pop();t&&(this.last_token=t.last_token,this.pos=t.pos,this.token=t.token)}},{key:"scan",value:function(){for(var t in this.skipBlank(),this.scanners._dict){var n=this.scanners._dict[t].value;if(this.token=n(this.source.slice(this.pos),this.last_token),this.token)return this.last_token=this.token,this.pos+=this.token.length,this.token}}}]),t}();n.default=u},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=s(e(10)),u=e(0),a=s(e(1)),o=e(7);function s(t){return t&&t.__esModule?t:{default:t}}var c=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.scanner=new i.default,this.expr_parser=new a.default,this.statement_parser=(0,o.build_satements)()}return r(t,[{key:"parse",value:function(t){this.code=t.toUpperCase(),this.scanner.setSource(t),this._nextToken();for(var n=[];this.token.type!=u.token_types.EOF;)n.push(this._parseLine());return n}},{key:"_parseLine",value:function(){var t,n=[];for(this.token.type==u.token_types.DeciamlNum&&(t=this.token.text,this._nextToken());!this._isLineTerminator();)n.push(this._parseStatement()),":"==this.token.text&&this._nextToken();return this._nextToken(),{lineNum:t,statements:n}}},{key:"_parseStatement",value:function(){var t,n,e=[];if(this.token.type==u.token_types.Keyword){if(t=this.token.text,n=this.statement_parser[t]){e=n(this.scanner,this.expr_parser);this.token=this.scanner.token}}else if(this.token.type==u.token_types.Identifier){var r=this.token;if(this._nextToken(),"="==this.token.text){if(t="LET",n=this.statement_parser.LET){e=n(this.scanner,this.expr_parser,r.text);this.token=this.scanner.token}}else this._throwError("Invalid token "+this.token.text)}else this._throwError("Invalid token "+this.token.text);return{statement:t,params:e}}},{key:"_isStatementTerminator",value:function(){return this.token.type==u.token_types.EOS||this.token.type==u.token_types.EOL||this.token.type==u.token_types.EOF}},{key:"_isLineTerminator",value:function(){return this.token.type==u.token_types.EOL||this.token.type==u.token_types.EOF}},{key:"_nextToken",value:function(){this.token=this.scanner.scan()}},{key:"_throwError",value:function(t){throw t}}]),t}();n.default=c},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=a(e(11)),u=a(e(6));function a(t){return t&&t.__esModule?t:{default:t}}var o=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.parser=new i.default,this.runtime=new u.default}return r(t,[{key:"execute",value:function(t){var n=this.parser.parse(t);this.runtime.execute(n)}}]),t}();window.BASIC=o,n.default=o},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"execute",value:function(t,n){var e=t.format&&t.format.length&&t.format[0]||"",r=t.exprs,i=!0,u=!1,a=void 0;try{for(var o,s=r[Symbol.iterator]();!(i=(o=s.next()).done);i=!0){var c=o.value,l=this.formateExpr(e,c);console.log(l)}}catch(t){u=!0,a=t}finally{try{!i&&s.return&&s.return()}finally{if(u)throw a}}}},{key:"formateExpr",value:function(t,n){}}]),t}();n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"evaluate",value:function(t,n){return console.log(t),this.runtime=n,this._evaluateNode(t)}},{key:"_evaluateNode",value:function(t){if(4==t.type||5==t.type||6==t.type||8==t.type)return t.value;if(t.prefix){if(n=this.runtime.op_manager.get_uniary(t.operator))return n(this._evaluateNode(t.argument));throw"Invalid Operator "+t.operator}if(t.is_binary){var n,e=this._evaluateNode(t.left),r=this._evaluateNode(t.right);if(n=this.runtime.op_manager.get_binary(t.operator))return n(e,r);throw"Invalid Operator "+t.operator}if(t.is_array){var i=[],u=!0,a=!1,o=void 0;try{for(var s,c=t.object[Symbol.iterator]();!(u=(s=c.next()).done);u=!0){var l=s.value;i.push(this._evaluateNode(l))}}catch(t){a=!0,o=t}finally{try{!u&&c.return&&c.return()}finally{if(a)throw o}}return i}}}]),t}();n.default=i},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}();var i=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.builtin_uniary={"+":function(t){return t},"-":function(t){return-t},NOT:function(t){return~t}},this.builtin_binary={"+":function(t,n){return t+n},"-":function(t,n){return t-n},"*":function(t,n){return t*n},"/":function(t,n){return t/n},"\\":function(t,n){return parseInt(t/n)},"^":function(t,n){return Math.pow(t,n)},"<":function(t,n){return t<n},">":function(t,n){return t>n},"==":function(t,n){return t==n},"<=":function(t,n){return t<=n},"=<":function(t,n){return t<=n},">=":function(t,n){return t>=n},"=>":function(t,n){return t>=n},"<>":function(t,n){return t!=n},AND:function(t,n){return t&&n},OR:function(t,n){return t||n},MOD:function(t,n){return t%n},XOR:function(t,n){return t^n},EQV:function(t,n){return~(t^n)},IMP:function(t,n){return~t^n}},this.uniary_dict=this.builtin_uniary,this.binary_dict=this.builtin_binary}return r(t,[{key:"clear",value:function(){this.uniary_dict=this.builtin_uniary,this.binary_dict=this.builtin_binary}},{key:"get_uniary",value:function(t){return this.uniary_dict[t]}},{key:"get_binary",value:function(t){return this.binary_dict[t]}},{key:"register_uniary",value:function(t,n){this.uniary_dict[t]=n}},{key:"register_binary",value:function(t,n){this.binary_dict[t]=n}}]),t}();n.default=i}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,