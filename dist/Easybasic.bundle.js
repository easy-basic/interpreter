!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=8)}([function(t,n,e){"use strict";n.token_types=Object.freeze({Whitespace:0,Comment:1,EOL:2,Keyword:3,DeciamlNum:4,OcatalNum:5,HexaNum:6,Operator:7,UniaryOperator:14,String:8,Identifier:9,Unknown:10,EOF:11,LineNumber:12,EOS:13,Array:15,Function:16}),n.keywords=["END","FOR","NEXT","DATA","INPUT","DIM","READ","LET","GOTO","RUN","IF","RESTORE","GOSUB","RETURN","STOP","PRINT","CLEAR","LIST","NEW","ON","WAIT","DEF","POKE","CONT","OUT","LPRINT","LLIST","WIDTH","ELSE","TRON","TROFF","SWAP","ERASE","EDIT","ERROR","RESUME","DELETE","AUTO","RENUM","DEFSTR","DEFINT","DEFSNG","DEFDBL","LINE","WHILE","WEND","CALL","WRITE","OPTION","RANDOMIZE","OPEN","CLOSE","LOAD","MERGE","SAVE","COLOR","CLS","MOTOR","BSAVE","BLOAD","SOUND","BEEP","PSET","PRESET","SCREEN","KEY","LOCATE","TO","THEN","TAB(","STEP","USR","FN","SPC(","NOT","ERL","ERR","STRING$","USING","INSTR","VARPTR","CSRLIN","POINT","OFF","INKEY$","CVI","CVS","CVD","MKI$","MKS$","MKD$","EXTERR","FILES","FIELD","SYSTEM","NAME","LSET","RSET","KILL","PUT","GET","RESET","COMMON","CHAIN","DATE$","TIME$","PAINT","COM","CIRCLE","DRAW","PLAY","TIMER","ERDEV","IOCTL","CHDIR","MKDIR","RMDIR","SHELL","ENVIRON","VIEW","WINDOW","PMAP","PALETTE","LCOPY","CALLS","PCOPY","LOCK","UNLOCK","LEFT$","RIGHT$","MID$","SGN","INT","ABS","SQR","RND","SIN","LOG","EXP","COS","TAN","ATN","FRE","INP","POS","LEN","STR$","VAL","ASC","CHR$","PEEK","SPACE$","OCT$","HEX$","LPOS","CINT","CSNG","CDBL","FIX","PEN","STICK","STRIG","EOF","LOC","LOF","NOISE","AS","SHARED","ACCESS","RANDOM","OUTPUT","APPEND","BASE","SEG","ALL","REM","'"],n.binary_operators={"^":12,"*":11,"/":11,"\\":10,MOD:9,"+":8,"-":8,">":7,"<":7,">=":7,"<=":7,"=>":7,"=<":7,"<>":7,"><":7,"=":7,AND:5,OR:4,XOR:3,EQV:2,IMP:1},n.unary_operators=["-","+","NOT"]},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=e(0);var o=2,u=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t)}return r(t,[{key:"parse",value:function(t,n){return this.scanner=t,this._parseUntil(n)}},{key:"_parseUntil",value:function(t){for(var n=[];;){if(this.scanner.peekState(),this.token=this.scanner.scan(),this.scanner.seekState(),!this.token||this.token.type==i.token_types.EOL)throw"Expected "+t;if(!this.token.text||this.token.text==t){this.token=this.scanner.scan();break}if(","!=this.token.text){var e=this._binaryParser();n.push(e)}}return n}},{key:"_readToken",value:function(){if(this.scanner.peekState(),this.token=this.scanner.scan(),this.token.type==i.token_types.DeciamlNum){var t=this.token.text.replace(/(!|%|#|)$/,"")||0;return Object.assign(this.token,{value:t})}if(this.token.type==i.token_types.OcatalNum){t=this.token.text.replace(/^&o?/i,"")||"0";return Object.assign(this.token,{value:parseFloat(t,8)})}if(this.token.type==i.token_types.HexaNum){t=this.token.text.replace(/^&h/i,"")||"0";return Object.assign(this.token,{value:parseFloat(t,16)})}if(this.token.type==i.token_types.String)return this.token;if("["==this.token.text)return _parseUntil("]");if(this._isUniaryOp(this.token.text))return{type:i.token_types.UniaryOperator,operator:this.token.text,argument:this._readToken(),prefix:!0};if("("==this.token.text)return this._parseUntil(")");if(this.token.type==i.token_types.Identifier){var n=this.token;if(this.token=this.scanner.scan(),"["==this.token.text)return{type:i.token_types.Array,object:n,property:this._parseUntil("]")};if("("==this.token.text)return{type:i.token_types.Function,object:n,property:this._parseUntil(")")}}return this.scanner.seekState(),!1}},{key:"_binaryPrecedence",value:function(t){return i.binary_operators[t]||0}},{key:"_readBinaryToken",value:function(){return this.scanner.peekState(),this.token=this.scanner.scan(),this.token.type==i.token_types.Operator?Object.assign(this.token,{prec:this._binaryPrecedence(this.token.text)}):(this.scanner.seekState(),!1)}},{key:"_isUniaryOp",value:function(t){return["+","-","NOT"].indexOf(t)>-1}},{key:"_binaryParser",value:function(){var t=this._readToken(),n=this._readBinaryToken();if(!n)return t;var e=this._readToken();if(!e)throw"Expected expression after "+n+", "+this.scanner.index;for(var r=[t,n,e];(n=this._readBinaryToken())&&0!=n.prec;){for(console.log(r);r.length>2&&n.prec<=r[r.length-2].prec;){e=r.pop(),n=r.pop(),t=r.pop();var i=this._createBinaryExpression(n,t,e);r.push(i)}if(!(i=this._readToken()))throw"Expected expression after "+n+", "+this.scanner.index;r.push(n,i)}var o=r.length-1;for(i=r[o];o>1;)i=this._createBinaryExpression(r[o-1],r[o-2],i),o-=2;return i}},{key:"_createBinaryExpression",value:function(t,n,e){return{type:o,operator:t.text,left:n,right:e}}}]),t}();n.default=u},function(t,n,e){var r,i=e(4),o=function(t,n,e,r){return{key:t,value:n,next:e,prev:r}};r=function(){var t=this;t._dict={},t._first=null,t._last=null,t._size=0;var n=i.toArray(arguments);t._stringify=function(t){return t},"function"==typeof n[0]&&(t._stringify=n.shift()),i.each(n,function(n){t.putBefore(n[0],n[1],null)})},i.extend(r.prototype,{_k:function(t){return" "+this._stringify(t)},empty:function(){return!this._first},size:function(){return this._size},_linkEltIn:function(t){t.next?(t.prev=t.next.prev,t.next.prev=t,t.prev&&(t.prev.next=t)):(t.prev=this._last,this._last&&(this._last.next=t),this._last=t),null!==this._first&&this._first!==t.next||(this._first=t)},_linkEltOut:function(t){t.next&&(t.next.prev=t.prev),t.prev&&(t.prev.next=t.next),t===this._last&&(this._last=t.prev),t===this._first&&(this._first=t.next)},putBefore:function(t,n,e){if(this._dict[this._k(t)])throw new Error("Item "+t+" already present in OrderedDict");var r=o(t,n,e?this._dict[this._k(e)]:null);if(void 0===r.next)throw new Error("could not find item to put this one before");this._linkEltIn(r),this._dict[this._k(t)]=r,this._size++},append:function(t,n){this.putBefore(t,n,null)},remove:function(t){var n=this._dict[this._k(t)];if(void 0===n)throw new Error("Item "+t+" not present in OrderedDict");return this._linkEltOut(n),this._size--,delete this._dict[this._k(t)],n.value},get:function(t){if(this.has(t))return this._dict[this._k(t)].value},has:function(t){return i.has(this._dict,this._k(t))},forEach:function(t){for(var n=0,e=this._first;null!==e;){if(t(e.value,e.key,n)===r.BREAK)return;e=e.next,n++}},first:function(){if(!this.empty())return this._first.key},firstValue:function(){if(!this.empty())return this._first.value},last:function(){if(!this.empty())return this._last.key},lastValue:function(){if(!this.empty())return this._last.value},prev:function(t){if(this.has(t)){var n=this._dict[this._k(t)];if(n.prev)return n.prev.key}return null},next:function(t){if(this.has(t)){var n=this._dict[this._k(t)];if(n.next)return n.next.key}return null},moveBefore:function(t,n){var e=this._dict[this._k(t)],r=n?this._dict[this._k(n)]:null;if(void 0===e)throw new Error("Item to move is not present");if(void 0===r)throw new Error("Could not find element to move this one before");r!==e.next&&(this._linkEltOut(e),e.next=r,this._linkEltIn(e))},indexOf:function(t){var n=this,e=null;return n.forEach(function(i,o,u){if(n._k(o)===n._k(t))return e=u,r.BREAK}),e},_checkRep:function(){i.each(this._dict,function(t,n){if(n.next===n)throw new Error("Next is a loop");if(n.prev===n)throw new Error("Prev is a loop")})}}),r.BREAK={break:!0},t.exports=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.build_satements=function(){var t=new r.default;return t.BEEP=o,t.LET=u,t};var r=i(e(2));i(e(1));function i(t){return t&&t.__esModule?t:{default:t}}function o(t,n){return{freq:n.parse(t,","),duration:n.parse(t,"\n")}}function u(t,n,e){if(!e){e=t.scan().text;var r=t.scan();if("="!=r.text)throw"Invalid token "+r.text}return{ident:e,val:n.parse(t,"\n")}}},function(t,n,e){var r;(function(){var e=this,i=e._,o={},u=Array.prototype,a=Object.prototype,s=Function.prototype,c=u.push,l=u.slice,f=u.concat,p=a.toString,h=a.hasOwnProperty,y=u.forEach,v=u.map,_=u.reduce,d=u.reduceRight,k=u.filter,E=u.every,m=u.some,g=u.indexOf,O=u.lastIndexOf,x=Array.isArray,b=Object.keys,T=s.bind,S=function(t){return t instanceof S?t:this instanceof S?void(this._wrapped=t):new S(t)};void 0!==t&&t.exports&&(n=t.exports=S),n._=S,S.VERSION="1.6.0";var w=S.each=S.forEach=function(t,n,e){if(null==t)return t;if(y&&t.forEach===y)t.forEach(n,e);else if(t.length===+t.length){for(var r=0,i=t.length;r<i;r++)if(n.call(e,t[r],r,t)===o)return}else{var u=S.keys(t);for(r=0,i=u.length;r<i;r++)if(n.call(e,t[u[r]],u[r],t)===o)return}return t};S.map=S.collect=function(t,n,e){var r=[];return null==t?r:v&&t.map===v?t.map(n,e):(w(t,function(t,i,o){r.push(n.call(e,t,i,o))}),r)};var R="Reduce of empty array with no initial value";S.reduce=S.foldl=S.inject=function(t,n,e,r){var i=arguments.length>2;if(null==t&&(t=[]),_&&t.reduce===_)return r&&(n=S.bind(n,r)),i?t.reduce(n,e):t.reduce(n);if(w(t,function(t,o,u){i?e=n.call(r,e,t,o,u):(e=t,i=!0)}),!i)throw new TypeError(R);return e},S.reduceRight=S.foldr=function(t,n,e,r){var i=arguments.length>2;if(null==t&&(t=[]),d&&t.reduceRight===d)return r&&(n=S.bind(n,r)),i?t.reduceRight(n,e):t.reduceRight(n);var o=t.length;if(o!==+o){var u=S.keys(t);o=u.length}if(w(t,function(a,s,c){s=u?u[--o]:--o,i?e=n.call(r,e,t[s],s,c):(e=t[s],i=!0)}),!i)throw new TypeError(R);return e},S.find=S.detect=function(t,n,e){var r;return N(t,function(t,i,o){if(n.call(e,t,i,o))return r=t,!0}),r},S.filter=S.select=function(t,n,e){var r=[];return null==t?r:k&&t.filter===k?t.filter(n,e):(w(t,function(t,i,o){n.call(e,t,i,o)&&r.push(t)}),r)},S.reject=function(t,n,e){return S.filter(t,function(t,r,i){return!n.call(e,t,r,i)},e)},S.every=S.all=function(t,n,e){n||(n=S.identity);var r=!0;return null==t?r:E&&t.every===E?t.every(n,e):(w(t,function(t,i,u){if(!(r=r&&n.call(e,t,i,u)))return o}),!!r)};var N=S.some=S.any=function(t,n,e){n||(n=S.identity);var r=!1;return null==t?r:m&&t.some===m?t.some(n,e):(w(t,function(t,i,u){if(r||(r=n.call(e,t,i,u)))return o}),!!r)};S.contains=S.include=function(t,n){return null!=t&&(g&&t.indexOf===g?-1!=t.indexOf(n):N(t,function(t){return t===n}))},S.invoke=function(t,n){var e=l.call(arguments,2),r=S.isFunction(n);return S.map(t,function(t){return(r?n:t[n]).apply(t,e)})},S.pluck=function(t,n){return S.map(t,S.property(n))},S.where=function(t,n){return S.filter(t,S.matches(n))},S.findWhere=function(t,n){return S.find(t,S.matches(n))},S.max=function(t,n,e){if(!n&&S.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.max.apply(Math,t);var r=-1/0,i=-1/0;return w(t,function(t,o,u){var a=n?n.call(e,t,o,u):t;a>i&&(r=t,i=a)}),r},S.min=function(t,n,e){if(!n&&S.isArray(t)&&t[0]===+t[0]&&t.length<65535)return Math.min.apply(Math,t);var r=1/0,i=1/0;return w(t,function(t,o,u){var a=n?n.call(e,t,o,u):t;a<i&&(r=t,i=a)}),r},S.shuffle=function(t){var n,e=0,r=[];return w(t,function(t){n=S.random(e++),r[e-1]=r[n],r[n]=t}),r},S.sample=function(t,n,e){return null==n||e?(t.length!==+t.length&&(t=S.values(t)),t[S.random(t.length-1)]):S.shuffle(t).slice(0,Math.max(0,n))};var A=function(t){return null==t?S.identity:S.isFunction(t)?t:S.property(t)};S.sortBy=function(t,n,e){return n=A(n),S.pluck(S.map(t,function(t,r,i){return{value:t,index:r,criteria:n.call(e,t,r,i)}}).sort(function(t,n){var e=t.criteria,r=n.criteria;if(e!==r){if(e>r||void 0===e)return 1;if(e<r||void 0===r)return-1}return t.index-n.index}),"value")};var I=function(t){return function(n,e,r){var i={};return e=A(e),w(n,function(o,u){var a=e.call(r,o,u,n);t(i,a,o)}),i}};S.groupBy=I(function(t,n,e){S.has(t,n)?t[n].push(e):t[n]=[e]}),S.indexBy=I(function(t,n,e){t[n]=e}),S.countBy=I(function(t,n){S.has(t,n)?t[n]++:t[n]=1}),S.sortedIndex=function(t,n,e,r){for(var i=(e=A(e)).call(r,n),o=0,u=t.length;o<u;){var a=o+u>>>1;e.call(r,t[a])<i?o=a+1:u=a}return o},S.toArray=function(t){return t?S.isArray(t)?l.call(t):t.length===+t.length?S.map(t,S.identity):S.values(t):[]},S.size=function(t){return null==t?0:t.length===+t.length?t.length:S.keys(t).length},S.first=S.head=S.take=function(t,n,e){if(null!=t)return null==n||e?t[0]:n<0?[]:l.call(t,0,n)},S.initial=function(t,n,e){return l.call(t,0,t.length-(null==n||e?1:n))},S.last=function(t,n,e){if(null!=t)return null==n||e?t[t.length-1]:l.call(t,Math.max(t.length-n,0))},S.rest=S.tail=S.drop=function(t,n,e){return l.call(t,null==n||e?1:n)},S.compact=function(t){return S.filter(t,S.identity)};var L=function(t,n,e){return n&&S.every(t,S.isArray)?f.apply(e,t):(w(t,function(t){S.isArray(t)||S.isArguments(t)?n?c.apply(e,t):L(t,n,e):e.push(t)}),e)};S.flatten=function(t,n){return L(t,n,[])},S.without=function(t){return S.difference(t,l.call(arguments,1))},S.partition=function(t,n){var e=[],r=[];return w(t,function(t){(n(t)?e:r).push(t)}),[e,r]},S.uniq=S.unique=function(t,n,e,r){S.isFunction(n)&&(r=e,e=n,n=!1);var i=e?S.map(t,e,r):t,o=[],u=[];return w(i,function(e,r){(n?r&&u[u.length-1]===e:S.contains(u,e))||(u.push(e),o.push(t[r]))}),o},S.union=function(){return S.uniq(S.flatten(arguments,!0))},S.intersection=function(t){var n=l.call(arguments,1);return S.filter(S.uniq(t),function(t){return S.every(n,function(n){return S.contains(n,t)})})},S.difference=function(t){var n=f.apply(u,l.call(arguments,1));return S.filter(t,function(t){return!S.contains(n,t)})},S.zip=function(){for(var t=S.max(S.pluck(arguments,"length").concat(0)),n=new Array(t),e=0;e<t;e++)n[e]=S.pluck(arguments,""+e);return n},S.object=function(t,n){if(null==t)return{};for(var e={},r=0,i=t.length;r<i;r++)n?e[t[r]]=n[r]:e[t[r][0]]=t[r][1];return e},S.indexOf=function(t,n,e){if(null==t)return-1;var r=0,i=t.length;if(e){if("number"!=typeof e)return t[r=S.sortedIndex(t,n)]===n?r:-1;r=e<0?Math.max(0,i+e):e}if(g&&t.indexOf===g)return t.indexOf(n,e);for(;r<i;r++)if(t[r]===n)return r;return-1},S.lastIndexOf=function(t,n,e){if(null==t)return-1;var r=null!=e;if(O&&t.lastIndexOf===O)return r?t.lastIndexOf(n,e):t.lastIndexOf(n);for(var i=r?e:t.length;i--;)if(t[i]===n)return i;return-1},S.range=function(t,n,e){arguments.length<=1&&(n=t||0,t=0),e=arguments[2]||1;for(var r=Math.max(Math.ceil((n-t)/e),0),i=0,o=new Array(r);i<r;)o[i++]=t,t+=e;return o};var P=function(){};S.bind=function(t,n){var e,r;if(T&&t.bind===T)return T.apply(t,l.call(arguments,1));if(!S.isFunction(t))throw new TypeError;return e=l.call(arguments,2),r=function(){if(!(this instanceof r))return t.apply(n,e.concat(l.call(arguments)));P.prototype=t.prototype;var i=new P;P.prototype=null;var o=t.apply(i,e.concat(l.call(arguments)));return Object(o)===o?o:i}},S.partial=function(t){var n=l.call(arguments,1);return function(){for(var e=0,r=n.slice(),i=0,o=r.length;i<o;i++)r[i]===S&&(r[i]=arguments[e++]);for(;e<arguments.length;)r.push(arguments[e++]);return t.apply(this,r)}},S.bindAll=function(t){var n=l.call(arguments,1);if(0===n.length)throw new Error("bindAll must be passed function names");return w(n,function(n){t[n]=S.bind(t[n],t)}),t},S.memoize=function(t,n){var e={};return n||(n=S.identity),function(){var r=n.apply(this,arguments);return S.has(e,r)?e[r]:e[r]=t.apply(this,arguments)}},S.delay=function(t,n){var e=l.call(arguments,2);return setTimeout(function(){return t.apply(null,e)},n)},S.defer=function(t){return S.delay.apply(S,[t,1].concat(l.call(arguments,1)))},S.throttle=function(t,n,e){var r,i,o,u=null,a=0;e||(e={});var s=function(){a=!1===e.leading?0:S.now(),u=null,o=t.apply(r,i),r=i=null};return function(){var c=S.now();a||!1!==e.leading||(a=c);var l=n-(c-a);return r=this,i=arguments,l<=0?(clearTimeout(u),u=null,a=c,o=t.apply(r,i),r=i=null):u||!1===e.trailing||(u=setTimeout(s,l)),o}},S.debounce=function(t,n,e){var r,i,o,u,a,s=function(){var c=S.now()-u;c<n?r=setTimeout(s,n-c):(r=null,e||(a=t.apply(o,i),o=i=null))};return function(){o=this,i=arguments,u=S.now();var c=e&&!r;return r||(r=setTimeout(s,n)),c&&(a=t.apply(o,i),o=i=null),a}},S.once=function(t){var n,e=!1;return function(){return e?n:(e=!0,n=t.apply(this,arguments),t=null,n)}},S.wrap=function(t,n){return S.partial(n,t)},S.compose=function(){var t=arguments;return function(){for(var n=arguments,e=t.length-1;e>=0;e--)n=[t[e].apply(this,n)];return n[0]}},S.after=function(t,n){return function(){if(--t<1)return n.apply(this,arguments)}},S.keys=function(t){if(!S.isObject(t))return[];if(b)return b(t);var n=[];for(var e in t)S.has(t,e)&&n.push(e);return n},S.values=function(t){for(var n=S.keys(t),e=n.length,r=new Array(e),i=0;i<e;i++)r[i]=t[n[i]];return r},S.pairs=function(t){for(var n=S.keys(t),e=n.length,r=new Array(e),i=0;i<e;i++)r[i]=[n[i],t[n[i]]];return r},S.invert=function(t){for(var n={},e=S.keys(t),r=0,i=e.length;r<i;r++)n[t[e[r]]]=e[r];return n},S.functions=S.methods=function(t){var n=[];for(var e in t)S.isFunction(t[e])&&n.push(e);return n.sort()},S.extend=function(t){return w(l.call(arguments,1),function(n){if(n)for(var e in n)t[e]=n[e]}),t},S.pick=function(t){var n={},e=f.apply(u,l.call(arguments,1));return w(e,function(e){e in t&&(n[e]=t[e])}),n},S.omit=function(t){var n={},e=f.apply(u,l.call(arguments,1));for(var r in t)S.contains(e,r)||(n[r]=t[r]);return n},S.defaults=function(t){return w(l.call(arguments,1),function(n){if(n)for(var e in n)void 0===t[e]&&(t[e]=n[e])}),t},S.clone=function(t){return S.isObject(t)?S.isArray(t)?t.slice():S.extend({},t):t},S.tap=function(t,n){return n(t),t};var j=function(t,n,e,r){if(t===n)return 0!==t||1/t==1/n;if(null==t||null==n)return t===n;t instanceof S&&(t=t._wrapped),n instanceof S&&(n=n._wrapped);var i=p.call(t);if(i!=p.call(n))return!1;switch(i){case"[object String]":return t==String(n);case"[object Number]":return t!=+t?n!=+n:0==t?1/t==1/n:t==+n;case"[object Date]":case"[object Boolean]":return+t==+n;case"[object RegExp]":return t.source==n.source&&t.global==n.global&&t.multiline==n.multiline&&t.ignoreCase==n.ignoreCase}if("object"!=typeof t||"object"!=typeof n)return!1;for(var o=e.length;o--;)if(e[o]==t)return r[o]==n;var u=t.constructor,a=n.constructor;if(u!==a&&!(S.isFunction(u)&&u instanceof u&&S.isFunction(a)&&a instanceof a)&&"constructor"in t&&"constructor"in n)return!1;e.push(t),r.push(n);var s=0,c=!0;if("[object Array]"==i){if(c=(s=t.length)==n.length)for(;s--&&(c=j(t[s],n[s],e,r)););}else{for(var l in t)if(S.has(t,l)&&(s++,!(c=S.has(n,l)&&j(t[l],n[l],e,r))))break;if(c){for(l in n)if(S.has(n,l)&&!s--)break;c=!s}}return e.pop(),r.pop(),c};S.isEqual=function(t,n){return j(t,n,[],[])},S.isEmpty=function(t){if(null==t)return!0;if(S.isArray(t)||S.isString(t))return 0===t.length;for(var n in t)if(S.has(t,n))return!1;return!0},S.isElement=function(t){return!(!t||1!==t.nodeType)},S.isArray=x||function(t){return"[object Array]"==p.call(t)},S.isObject=function(t){return t===Object(t)},w(["Arguments","Function","String","Number","Date","RegExp"],function(t){S["is"+t]=function(n){return p.call(n)=="[object "+t+"]"}}),S.isArguments(arguments)||(S.isArguments=function(t){return!(!t||!S.has(t,"callee"))}),S.isFunction=function(t){return"function"==typeof t},S.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},S.isNaN=function(t){return S.isNumber(t)&&t!=+t},S.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"==p.call(t)},S.isNull=function(t){return null===t},S.isUndefined=function(t){return void 0===t},S.has=function(t,n){return h.call(t,n)},S.noConflict=function(){return e._=i,this},S.identity=function(t){return t},S.constant=function(t){return function(){return t}},S.property=function(t){return function(n){return n[t]}},S.matches=function(t){return function(n){if(n===t)return!0;for(var e in t)if(t[e]!==n[e])return!1;return!0}},S.times=function(t,n,e){for(var r=Array(Math.max(0,t)),i=0;i<t;i++)r[i]=n.call(e,i);return r},S.random=function(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))},S.now=Date.now||function(){return(new Date).getTime()};var M={escape:{"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;"}};M.unescape=S.invert(M.escape);var C={escape:new RegExp("["+S.keys(M.escape).join("")+"]","g"),unescape:new RegExp("("+S.keys(M.unescape).join("|")+")","g")};S.each(["escape","unescape"],function(t){S[t]=function(n){return null==n?"":(""+n).replace(C[t],function(n){return M[t][n]})}}),S.result=function(t,n){if(null!=t){var e=t[n];return S.isFunction(e)?e.call(t):e}},S.mixin=function(t){w(S.functions(t),function(n){var e=S[n]=t[n];S.prototype[n]=function(){var t=[this._wrapped];return c.apply(t,arguments),$.call(this,e.apply(S,t))}})};var D=0;S.uniqueId=function(t){var n=++D+"";return t?t+n:n},S.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var F=/(.)^/,B={"'":"'","\\":"\\","\r":"r","\n":"n","\t":"t","\u2028":"u2028","\u2029":"u2029"},U=/\\|'|\r|\n|\t|\u2028|\u2029/g;S.template=function(t,n,e){var r;e=S.defaults({},e,S.templateSettings);var i=new RegExp([(e.escape||F).source,(e.interpolate||F).source,(e.evaluate||F).source].join("|")+"|$","g"),o=0,u="__p+='";t.replace(i,function(n,e,r,i,a){return u+=t.slice(o,a).replace(U,function(t){return"\\"+B[t]}),e&&(u+="'+\n((__t=("+e+"))==null?'':_.escape(__t))+\n'"),r&&(u+="'+\n((__t=("+r+"))==null?'':__t)+\n'"),i&&(u+="';\n"+i+"\n__p+='"),o=a+n.length,n}),u+="';\n",e.variable||(u="with(obj||{}){\n"+u+"}\n"),u="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+u+"return __p;\n";try{r=new Function(e.variable||"obj","_",u)}catch(t){throw t.source=u,t}if(n)return r(n,S);var a=function(t){return r.call(this,t,S)};return a.source="function("+(e.variable||"obj")+"){\n"+u+"}",a},S.chain=function(t){return S(t).chain()};var $=function(t){return this._chain?S(t).chain():t};S.mixin(S),w(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var n=u[t];S.prototype[t]=function(){var e=this._wrapped;return n.apply(e,arguments),"shift"!=t&&"splice"!=t||0!==e.length||delete e[0],$.call(this,e)}}),w(["concat","join","slice"],function(t){var n=u[t];S.prototype[t]=function(){return $.call(this,n.apply(this._wrapped,arguments))}}),S.extend(S.prototype,{chain:function(){return this._chain=!0,this},value:function(){return this._wrapped}}),void 0===(r=function(){return S}.apply(n,[]))||(t.exports=r)}).call(this)},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.build_scanners=function(){var t=new r.default;return t.append("eof_scanner",o),t.append("eol_scanner",u),t.append("eos_scanner",a),t.append("comment_scanner",c),t.append("keyword_scanner",s),t.append("operator_scanner",h),t.append("string_scanner",y),t.append("decimal_scanner",l),t.append("hexa_scanner",p),t.append("octal_scanner",f),t.append("identifier_scanner",v),t.append("unkown_scanner",_),t};var r=function(t){return t&&t.__esModule?t:{default:t}}(e(2)),i=e(0);function o(t,n){if(!t[0])return{length:0,type:i.token_types.EOF,text:t[0]}}function u(t,n){if(t.match(/^(\r\n|\r|\n)/))return{length:1,type:i.token_types.EOL,text:t.slice(0,1)}}function a(t,n){if(":"==t[0])return{length:1,type:i.token_types.EOS,text:":"}}function s(t,n){var e=t.match(/^[a-z$(']+/i);if(e&&i.keywords.indexOf(e[0].toUpperCase())>-1)return{length:e[0].length,type:i.token_types.Keyword,text:e[0].toUpperCase()}}function c(t,n){var e=0;if(n&&("REM"==n.text||"'"==n.text)){for(;t[e]&&!t[e].match(/^(\r\n|\r|\n)/);)e++;return{length:e,type:i.token_types.Comment,text:t.slice(0,e)}}}function l(t,n){var e=t.match(/^((\+|-)?[\d.]+((e|d)(\+|-)?(\d))?(#|!|%)?)/i);if(e)return{length:e[0].length,type:i.token_types.DeciamlNum,text:e[0]}}function f(t,n){var e=t.match(/^&o?[0-7]*/i);if(e)return{length:e[0].length,type:i.token_types.DeciamlNum,text:e[0]}}function p(t,n){var e=t.match(/^&h[0-9a-f]*/i);if(e)return{length:e[0].length,type:i.token_types.DeciamlNum,text:e[0]}}function h(t,n){var e=t.slice(0,3).match(/(MOD|AND|OR|XOR|EQV|IMP)/i)||t.slice(0,2).match(/(>=|<=|=>|=<|<>|=)/i)||t.match(/^(\^|\*|\/|\\|\+|-|>|<|\(|\))/i);if(e)return{length:e[0].length,type:i.token_types.Operator,text:e[0]}}function y(t,n){var e=t.match(/^"([^"\r\n]*)"?/);if(e)return{length:e[0].length,type:i.token_types.String,text:e[0]}}function v(t,n){var e=t.match(/^([a-z]([a-z0-9.]+)?)(!|#|\$)?/i);if(e)return{length:e[0].length,type:i.token_types.Identifier,text:e[0]}}function _(t,n){return{length:1,type:i.token_types.Unknown,text:t[0]}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=e(5);var o=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.source="",this.pos=0,this.last_token=null,this.token=null,this.scanners=(0,i.build_scanners)(),this.states=[]}return r(t,[{key:"setSource",value:function(t){this.source=t,this.pos=0,this.last_token=null,this.token=null}},{key:"skipBlank",value:function(){var t=this.source.slice(this.pos).match(/^[ \t\f]+/);t&&(this.pos+=t.length)}},{key:"peekState",value:function(){this.states.push({last_token:this.last_token,pos:this.pos,token:this.token})}},{key:"seekState",value:function(){var t=this.states.pop();t&&(this.last_token=t.last_token,this.pos=t.pos,this.token=t.token)}},{key:"scan",value:function(){for(var t in this.skipBlank(),this.scanners._dict){var n=this.scanners._dict[t].value;if(this.token=n(this.source.slice(this.pos),this.last_token),this.token)return this.last_token=this.token,this.pos+=this.token.length,this.token}}}]),t}();n.default=o},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=s(e(6)),o=e(0),u=s(e(1)),a=e(3);function s(t){return t&&t.__esModule?t:{default:t}}var c=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.scanner=new i.default,this.expr_parser=new u.default,this.statement_parser=(0,a.build_satements)()}return r(t,[{key:"parse",value:function(t){this.code=t.toUpperCase(),this.scanner.setSource(t),this._nextToken();for(var n=[];this.token.type!=o.token_types.EOF;)n.push(this._parseLine());return n}},{key:"_parseLine",value:function(){var t,n=[];for(this.token.type==o.token_types.DeciamlNum&&(t=this.token.text,this._nextToken());!this._isLineTerminator();)n.push(this._parseStatement()),":"==this.token.text&&this._nextToken();return this._nextToken(),{lineNum:t,statements:n}}},{key:"_parseStatement",value:function(){var t,n,e=[];if(this.token.type==o.token_types.Keyword){if(t=this.token.text,n=this.statement_parser[t]){e=n(this.scanner,this.expr_parser);this.token=this.scanner.token}}else if(this.token.type==o.token_types.Identifier){var r=this.token;if(this._nextToken(),"="==this.token.text){if(t="LET",n=this.statement_parser.LET){e=n(this.scanner,this.expr_parser,r.text);this.token=this.scanner.token}}else this._throwError("Invalid token "+this.token.text)}else this._throwError("Invalid token "+this.token.text);return{statement:t,params:e}}},{key:"_isStatementTerminator",value:function(){return this.token.type==o.token_types.EOS||this.token.type==o.token_types.EOL||this.token.type==o.token_types.EOF}},{key:"_isLineTerminator",value:function(){return this.token.type==o.token_types.EOL||this.token.type==o.token_types.EOF}},{key:"_nextToken",value:function(){this.token=this.scanner.scan()}},{key:"_throwError",value:function(t){throw t}}]),t}();n.default=c},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),i=function(t){return t&&t.__esModule?t:{default:t}}(e(7));var o=function(){function t(){!function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}(this,t),this.parser=new i.default}return r(t,[{key:"parse",value:function(t){return this.parser.parse(t)}}]),t}();window.BASIC=o,n.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,